//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Scripts/Inputs/CarControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarControls"",
    ""maps"": [
        {
            ""name"": ""CarInput"",
            ""id"": ""19a33ff9-c8fe-470b-a758-4e177e55bb92"",
            ""actions"": [
                {
                    ""name"": ""Axis"",
                    ""type"": ""Value"",
                    ""id"": ""b512966e-84bf-4b81-901f-e813422c3845"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c275cea-80a2-40ac-ae33-270bbd672123"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarInput
        m_CarInput = asset.FindActionMap("CarInput", throwIfNotFound: true);
        m_CarInput_Axis = m_CarInput.FindAction("Axis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarInput
    private readonly InputActionMap m_CarInput;
    private ICarInputActions m_CarInputActionsCallbackInterface;
    private readonly InputAction m_CarInput_Axis;
    public struct CarInputActions
    {
        private @CarControls m_Wrapper;
        public CarInputActions(@CarControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Axis => m_Wrapper.m_CarInput_Axis;
        public InputActionMap Get() { return m_Wrapper.m_CarInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarInputActions set) { return set.Get(); }
        public void SetCallbacks(ICarInputActions instance)
        {
            if (m_Wrapper.m_CarInputActionsCallbackInterface != null)
            {
                @Axis.started -= m_Wrapper.m_CarInputActionsCallbackInterface.OnAxis;
                @Axis.performed -= m_Wrapper.m_CarInputActionsCallbackInterface.OnAxis;
                @Axis.canceled -= m_Wrapper.m_CarInputActionsCallbackInterface.OnAxis;
            }
            m_Wrapper.m_CarInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Axis.started += instance.OnAxis;
                @Axis.performed += instance.OnAxis;
                @Axis.canceled += instance.OnAxis;
            }
        }
    }
    public CarInputActions @CarInput => new CarInputActions(this);
    public interface ICarInputActions
    {
        void OnAxis(InputAction.CallbackContext context);
    }
}
